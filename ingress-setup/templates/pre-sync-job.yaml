apiVersion: batch/v1
kind: Job
metadata:
  name: ingress-setup-job
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: ingress-setup-sa
      containers:
      - name: setup
        image: bitnami/kubectl:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Attendre que le controller ingress-nginx soit disponible
          echo "Waiting for ingress-nginx controller..."
          until kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller 2>/dev/null; do
            sleep 5
          done

          # Attendre que les pods soient ready
          echo "Waiting for ingress-nginx pods to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=120s

          # Cr√©er le ConfigMap avec les informations des domaines
          DOMAINS="{{ range .Values.services }}{{ .subdomain }}.{{ $.Values.baseDomain }} {{ end }}"
          
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: ingress-domains-config
            namespace: {{ .Release.Namespace }}
          data:
            domains: "$DOMAINS"
          EOF
      restartPolicy: Never
  backoffLimit: 2
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-setup-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ingress-setup-role
rules:
- apiGroups: [""]
  resources: ["pods", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["pods/status"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ingress-setup-rolebinding
subjects:
- kind: ServiceAccount
  name: ingress-setup-sa
roleRef:
  kind: Role
  name: ingress-setup-role
  apiGroup: rbac.authorization.k8s.io