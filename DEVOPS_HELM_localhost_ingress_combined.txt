==== ./tailscale-proxy/Chart.yaml ====

apiVersion: v2
name: tailscale-config
description: Tailscale connector configuration for ingress
version: 0.1.0

==== ./tailscale-proxy/templates/tailscale-proxy.yaml ====

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tailscale-proxy
  namespace: tailscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tailscale-proxy
  template:
    metadata:
      labels:
        app: tailscale-proxy
    spec:
      serviceAccountName: tailscale
      containers:
        - name: tailscale
          image: ghcr.io/tailscale/tailscale:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              tailscaled --state=mem:ts-secrets --tun=userspace-networking &
              sleep 5
              tailscale up --authkey="${TS_AUTHKEY}" --hostname="${TS_HOSTNAME}" --accept-routes --advertise-routes="${TS_ROUTES}"
              tailscale serve --bg 80
              sleep infinity
          env:
            - name: TS_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: ts-secrets
                  key: TS_HOSTNAME
            - name: TS_AUTHKEY
              valueFrom:
                secretKeyRef:
                  name: ts-secrets
                  key: TS_AUTHKEY
            - name: TS_ROUTES
              valueFrom:
                secretKeyRef:
                  name: ts-secrets
                  key: TS_ROUTES
          securityContext:
            capabilities:
              add:
                - NET_ADMIN


==== ./tailscale-proxy/templates/tailscale-rbac.yaml ====

apiVersion: v1
kind: ServiceAccount
metadata:
  name: tailscale

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tailscale
rules:
  - apiGroups: [""]
    resourceNames: ["ts-secrets"]
    resources: ["secrets"]
    verbs: ["get", "update", "patch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tailscale
subjects:
  - kind: ServiceAccount
    name: tailscale
roleRef:
  kind: Role
  name: tailscale
  apiGroup: rbac.authorization.k8s.io



==== ./ingress-setup/values.dev.yaml ====

module: ingress-setup
environment: dev
baseDomain: cquant-desktop.tailc6fb0e.ts.net
tls:
  issuer: selfsigned
  enabled: false # si true: l'ingress tente de générer en https 
ingress:
  className: nginx
  annotations:
    tailscale.com/expose: "true" # Annotation officielle Tailscale pour exposer les services
    # tailscale.com/serve: "true"  # Nouvelle annotation pour Tailscale serve
    # tailscale.com/https: "true"  # Gestionnaire HTTPS natif de Tailscale
    # tailscale.com/funnel: "true"  # Activation de Tailscale Funnel
    nginx.ingress.kubernetes.io/ssl-redirect: "false" # redirection automatique des requêtes HTTP vers HTTPS.
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false" # Semblable à ssl-redirect, mais plus explicite pour forcer ou non la redirection vers HTTPS. garder false ten quon utilise pas https exclusivement
    # si on na pas de sous-chemins alors commenter ces deux lignes du bas : 
    # nginx.ingress.kubernetes.io/use-regex: "true" # Permet l'utilisation d'expressions régulières dans les chemins spécifiés dans l'Ingress.
    nginx.ingress.kubernetes.io/rewrite-target: /
services:
  - path: /
    pathType: Prefix
    name: success-app-dev-service
    port: 80
  - path: /
    pathType: Prefix
    name: dagster-dev-service
    port: 80
  # - path: /success/?(.*)
  #   pathType: Prefix
  #   name: success-app-dev-service
  #   port: 80
  # - path: /trading-strategy-analysis/?(.*)
  #   pathType: Prefix
  #   name: tsa-dev-service
  #   port: 80
  # - path: /optionviz/?(.*)
  #   pathType: Prefix
  #   name: optionsviz-dev-service
  #   port: 80

==== ./ingress-setup/Chart.yaml ====

apiVersion: v2
name: ingress-setup
description: Ingress configuration
version: 0.1.0

==== ./ingress-setup/values.prod.yaml ====

# values-prod.yaml
environment: prod
domain: quant-cm.com
infos:
  email: quant-cm@gmail.com
service:
  port: 80
  targetPort: 8070
ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
  hosts:
    paths:
      - path: /
        pathType: Prefix
  tls:
    - secretName: quant-cm-cert-prod
    - certificateName: quant-cm-cert-prod

==== ./ingress-setup/templates/certificate.yaml ====

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ .Values.module }}-{{ .Values.environment }}-certificate
  namespace: {{ .Values.environment }}
  labels:
    {{- include "ingress-setup.labels" . | nindent 4 }}
spec:
  secretName: {{ include "ingress-setup.tlsSecretName" . }}
  issuerRef:
    name: {{ .Values.module }}-{{ .Values.environment }}-issuer
    kind: ClusterIssuer
  dnsNames:
    - {{ .Values.baseDomain }}
  commonName: {{ .Values.baseDomain }}
  duration: 2160h
  renewBefore: 360h
  privateKey:
    algorithm: RSA
    size: 2048
  usages:
    - server auth

==== ./ingress-setup/templates/cert-manager.yaml ====

apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: {{ .Values.module }}-{{ .Values.environment }}-issuer
  namespace: {{ .Values.environment }}
spec:
  {{- if eq .Values.environment "dev" }}
  selfSigned: {}
  {{- else }}
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: {{ .Values.infos.email }}
    privateKeySecretRef:
      name: letsencrypt-{{ .Values.environment }}
    solvers:
      - http01:
          ingress:
            class: nginx
  {{- end }}

==== ./ingress-setup/templates/ingress.yaml ====

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.module }}-{{ .Values.environment }}-ingress
  namespace: {{ .Values.environment }}
  labels:
    {{- include "ingress-setup.labels" . | nindent 4 }}
  annotations:
    {{- with .Values.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  ingressClassName: {{ .Values.ingress.className }}
  tls:
    - secretName: {{ include "ingress-setup.tlsSecretName" . }}
      hosts:
        - {{ $.Values.baseDomain }}
  rules:
    - host: {{ $.Values.baseDomain }}
      http:
        paths:
        {{- if .Values.services }}
        {{- range .Values.services }}
          - path: {{ .path }}
            pathType: {{ .pathType }}
            backend:
              service:
                name: {{ .name }}
                port:
                  number: {{ .port }}
        {{- end }}
        {{- end }}

==== ./metallb-config/values.yaml ====

# values.yaml
ipAddressPools:
  name: "first-pool"
  namespace: "metallb-system"  # Namespace du ConfigMap
  secretRef:
    name: "ts-secrets"         # Nom du secret dans le namespace tailscale
    key: "TS_IP"               # Clé dans le secret

l2Advertisements:
  name: "l2-advertisement"

webhook:
  enabled: true
  serviceAccount:
    create: true
  tls:
    generate: true


==== ./metallb-config/Chart.yaml ====

apiVersion: v2
name: metallb-config
description: Configuration for MetalLB in Kubernetes
version: 0.1.0
appVersion: "1.0.0"

==== ./metallb-config/templates/l2advertisement.yaml ====

# templates/l2advertisement.yaml
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: {{ .Values.l2Advertisements.name }}
  namespace: {{ .Release.Namespace }}
spec:
  ipAddressPools:
    - {{ .Values.ipAddressPools.name }}

==== ./metallb-config/templates/job-init-pool.yaml ====

apiVersion: batch/v1
kind: Job
metadata:
  name: metallb-init-config-metallb-config
  namespace: metallb-system
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"  # S'exécute après la création du RBAC
    # "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        app: metallb-init-config
    spec:
      serviceAccountName: metallb-init-config
      restartPolicy: Never
      containers:
      - name: init-config
        image: bitnami/kubectl:latest
        # command:
        # - /bin/sh
        # - -xec
        # - |
        #   echo "=== Starting init job at $(date) ==="
        #   kubectl get serviceaccount metallb-init-config
        #   kubectl auth can-i get secrets -n tailscale
        #   kubectl auth can-i create configmap -n metallb-system
          
        #   IP=$(kubectl get secret -n tailscale ts-secrets -o jsonpath="{.data.TS_IP}" | base64 -d)
        #   echo "IP from secret: $IP"
          
        #   kubectl create configmap metallb-ip-config \
        #     -n metallb-system \
        #     --from-literal=addresses="$IP" \
        #     --dry-run=client -o yaml | kubectl apply -f -
          
        #   echo "=== Job completed at $(date) ==="
        command:
        - /bin/sh
        - -xec
        - |
          echo "=== Starting init job at $(date) ==="
          if ! kubectl get secret -n tailscale ts-secrets; then
            echo "Secret ts-secrets not found! Exiting."
            exit 1
          fi
          if ! kubectl get secret -n tailscale ts-secrets -o jsonpath="{.data.TS_IP}" | base64 -d; then
            echo "Key TS_IP not found in secret! Exiting."
            exit 1
          fi
          
          IP=$(kubectl get secret -n tailscale ts-secrets -o jsonpath="{.data.TS_IP}" | base64 -d)
          echo -p "IP from secret: $IP"
          
          kubectl create configmap metallb-ip-config \
            -n {{ .Release.Namespace }} \
            --from-literal=addresses="$IP" \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "configmap created"

          # Assurez-vous que le pool existe avant de patcher
          while ! kubectl get ipaddresspool first-pool -n metallb-system; do
            echo "Waiting for IPAddressPool to be created..."
            sleep 5
          done

          # Patch le pool avec l'adresse récupérée
          kubectl patch ipaddresspool first-pool -n metallb-system --type merge -p '{"spec": {"addresses": ["'"$IP"'"]}}'


          echo "ipaddresspool patched for adressses argument"
          
          echo "=== Job completed at $(date) ==="


==== ./metallb-config/templates/ipaddresspool.yaml ====

apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-6"  # S'exécute avant le Job (-5)
  name: first-pool
  namespace: metallb-system
spec:
  addresses: 
   - "127.0.0.1/32"  # Adresse locale # attention pas utilisable mais remplacée par le job
  autoAssign: true


==== ./metallb-config/templates/rbac.yaml ====

apiVersion: v1
kind: ServiceAccount
metadata:
  name: metallb-init-config
  namespace: metallb-system
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: metallb-init-role
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-9"
rules:
- apiGroups: [""]
  resources: ["secrets", "serviceaccounts"]  # Ajout de serviceaccounts
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "update", "patch", "get"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
  namespaces: ["tailscale"]  # Assurez-vous d'ajouter la restriction de namespace ici
  # Nouveau pour ipaddresspools
- apiGroups: ["metallb.io"]
  resources: ["ipaddresspools"]
  verbs: ["get", "list", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metallb-init-binding
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-8"
subjects:
- kind: ServiceAccount
  name: metallb-init-config
  namespace: metallb-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: metallb-init-role

==== ./httpbin/Chart.yaml ====

apiVersion: v2
name: httpbin
description: httpbin
version: 0.1.0

==== ./httpbin/http.yaml ====

apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
        - name: httpbin
          image: kennethreitz/httpbin
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
spec:
  ports:
    - port: 80
  selector:
    app: httpbin
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: httpbin-ingress
spec:
  rules:
  - host: cquant-desktop.tailc6fb0e.ts.net
    http:
      paths:
      - path: /httpbin
        pathType: Prefix
        backend:
          service:
            name: httpbin
            port:
              number: 80


==== ./httpbin/templates/namespace.yaml ====

apiVersion: v1
kind: Namespace
metadata:
  name: httpbin

==== ./httpbin/templates/service.yaml ====

apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: httpbin
spec:
  ports:
    - port: 80
  selector:
    app: httpbin

==== ./httpbin/templates/deployment.yaml ====

apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
      - name: httpbin
        image: arnaudlacour/httpbin
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"


==== ./httpbin/templates/ingress.yaml ====

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: httpbin-ingress
  namespace: httpbin
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: cquant-desktop.tailc6fb0e.ts.net
      http:
        paths:
        - path: /httpbin
          pathType: Prefix
          backend:
            service:
              name: httpbin
              port:
                number: 80

